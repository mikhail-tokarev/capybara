workflows:
  default-workflow:
    name: Default Workflow
    environment:
      vars:
        myGoogleSecret: supersecretsecret
        CM_KEYSTORE: Encrypted()
        CM_KEYSTORE_PASSWORD: Encrypted(Z0FBQUFBQmRreXZSSGVpT3c4S1pwZ0JTdXhkNXRkSk42MDhCRmpRbGNLcHJjME10YlJqWmh1OFZkdmpoV0J4ZGlmZGl5T3M3djFoTW1SZl90TTNhZDRwdlpIYUluMXlYQlE9PQ==)
        CM_KEY_ALIAS_PASSWORD: Encrypted(Z0FBQUFBQmRreXZSaU40djdOcnlYVi04dnpraEJYN0VzdjBsbzEzajREcVk3Um5FelhsU3ZsdTU3TGJpdEJzX0cyY1pHZGtNeGVkX1ZlS2hmdGxlM1o0ckRlNkRJTElySVE9PQ==)
        CM_KEY_ALIAS_USERNAME: Encrypted(Z0FBQUFBQmRreXZSMWVfNmthT0o5angzUzBhbFhLeHo5aFdCdVQxZW5yYWRmSUxuaHJ0cWV2QlliYnlHOGRjY1EzMFM4ZS11eXR3Q3B1YzZFSjk4UTRRM200MG80aEdkUEE9PQ==)
      flutter: stable
    cache:
      enabled: false
      cache_paths: []
    scripts:
      - echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
      - echo "storePassword=$CM_KEYSTORE_PASSWORD" > $FCI_BUILD_DIR/android/key.properties
      - echo "keyPassword=$CM_KEY_ALIAS_PASSWORD" >> $FCI_BUILD_DIR/android/key.properties
      - echo "keyAlias=$CM_KEY_ALIAS_USERNAME" >> $FCI_BUILD_DIR/android/key.properties
      - echo "storeFile=/tmp/keystore.keystore" >> $FCI_BUILD_DIR/android/key.properties
      - '# echo "flutter.sdk=/Users/builder/programs/flutter" > $FCI_BUILD_DIR/android/local.properties'
      - |
        #!/bin/sh

        ifconfig
      - flutter packages pub get
      - flutter analyze
      - '# flutter drive --target=test_driver/button_pressing.dart'
      - '# flutter test'
      - '# flutter build apk --release -v'
      - '# flutter build web --release'
    automatic_builds: false
    build_on_pr_update: false
    project_file: ''
    branch_patterns:
      - pattern: '*dev'
        include: false
        source: true
      - pattern: master
        include: true
        source: true
    publishing:
      email:
        recipients: []
        publish_when_fail: false
      slack:
        channel: '#dev-slack-publishing'
        notify_on_build_start: true
        publish_when_fail: true
      google_play:
        credentials: ''
        publish_when_fail: false
        track: internal
      static_page:
        subdomain: ''
        publish_when_fail: false
      s3_static_page:
        aws_access_key_id: null
        aws_secret_access_key: ''
        bucket_name: null
        publish_when_fail: false
    artifacts:
      - flutter_drive.log
  android-qa:
    name: Android QA
    environment:
      vars:
        mySecretVariable: supersecret
        myPublicVariable: this is public
      flutter: stable
    cache:
      enabled: false
      cache_paths: []
    scripts:
      - '# echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore'
      - '# echo "storePassword=$CM_KEYSTORE_PASSWORD" > $FCI_BUILD_DIR/android/key.properties'
      - '# echo "keyPassword=$CM_KEY_ALIAS_PASSWORD" >> $FCI_BUILD_DIR/android/key.properties'
      - '# echo "keyAlias=$CM_KEY_ALIAS_USERNAME" >> $FCI_BUILD_DIR/android/key.properties'
      - '# echo "storeFile=/tmp/keystore.keystore" >> $FCI_BUILD_DIR/android/key.properties'
      - echo "flutter.sdk=/Users/builder/programs/flutter" > $FCI_BUILD_DIR/android/local.properties
      - |
        #!/bin/sh

        ifconfig
      - flutter packages pub get
      - '# flutter analyze'
      - '# flutter drive --target=test_driver/button_pressing.dart'
      - '# flutter test'
      - flutter build appbundle --release -v
      - '# flutter build web --release'
    automatic_builds: false
    build_on_pr_update: false
    project_file: ''
    branch_patterns:
      - pattern: '*dev'
        include: false
        source: true
      - pattern: '*master'
        include: true
        source: true
    publishing:
      email:
        recipients: []
        publish_when_fail: false
      slack:
        channel: '#dev-slack-publishing'
        notify_on_build_start: true
        publish_when_fail: true
      google_play:
        credentials: ''
        publish_when_fail: false
        track: internal
      static_page:
        subdomain: ''
        publish_when_fail: false
      s3_static_page:
        aws_access_key_id: null
        aws_secret_access_key: ''
        bucket_name: null
        publish_when_fail: false
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
  test-workflow:
    name: Martin Workflow
    environment:
      vars:
        CM_KEYSTORE: Encrypted()
        myGoogleSecret: supersecretsecret
      flutter: stable
    cache:
      enabled: false
      cache_paths: []
    scripts:
      - echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
      - '# echo "storePassword=$CM_KEYSTORE_PASSWORD" > $FCI_BUILD_DIR/android/key.properties'
      - '# echo "keyPassword=$CM_KEY_ALIAS_PASSWORD" >> $FCI_BUILD_DIR/android/key.properties'
      - '# echo "keyAlias=$CM_KEY_ALIAS_USERNAME" >> $FCI_BUILD_DIR/android/key.properties'
      - '# echo "storeFile=/tmp/keystore.keystore" >> $FCI_BUILD_DIR/android/key.properties'
      - echo "flutter.sdk=/Users/builder/programs/flutter" > $FCI_BUILD_DIR/android/local.properties
      - ifconfig
      - flutter packages pub get
      - flutter analyze
      - '# flutter drive --target=test_driver/button_pressing.dart'
      - flutter test --machine
      - rm /Users/builder/.android/debug.keystore && keytool -genkeypair -alias androiddebugkey -keypass android -keystore /Users/builder/.android/debug.keystore -storepass android -dname "CN=Android Debug,O=Android,C=US" -keyalg RSA -keysize 2048 -validity 10000
      - flutter build apk --debug
      - '# flutter build web --release'
    automatic_builds: false
    build_on_pr_update: false
    project_file: ''
    branch_patterns:
      - pattern: '*dev'
        include: false
        source: true
      - pattern: master
        include: true
        source: true
    publishing:
      email:
        recipients:
          - lattpriit+yaml@gmail.com
        publish_when_fail: false
      slack:
        channel: '#dev-slack-publishing'
        notify_on_build_start: true
        publish_when_fail: true
      google_play:
        credentials: ''
        publish_when_fail: false
        track: internal
      static_page:
        subdomain: ''
        publish_when_fail: false
      s3_static_page:
        aws_access_key_id: null
        aws_secret_access_key: ''
        bucket_name: null
        publish_when_fail: false
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
